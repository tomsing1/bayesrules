---
title: "Chapter 2: Bayes’ Rule"
author: "Thomas Sandmann"
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
execute: 
  cache: false
---

This quarto markdown documents contains code from Chapter 2 of
[Bayes Rules! An Introduction to Applied Bayesian Modeling](https://www.bayesrulesbook.com/chapter-2#building-a-bayesian-model-for-events)
by Alicia A. Johnson, Miles Q. Ott and Mine Dogucu.

I am using it to document my progress and to take notes as I work my way through
the book. Many thanks to the authors for making their book available online!

```{r}
#| message: false
#| warning: false
library(bayesrules)
library(janitor)
library(patchwork)
library(sessioninfo)
library(tidyverse)

# Import article data
data(fake_news)
```

```{r}
fake_news %>% 
  tabyl(title_has_excl, type) %>% 
  adorn_totals("row")
```

## 2.1 Building a Bayesian model for events

### 2.1.5 Posterior simulation

```{r}
# Define possible articles
article <- data.frame(type = c("real", "fake"))

# Define the prior model
prior <- c(0.6, 0.4)

# Set the seed. Simulate 10000 articles.
set.seed(84735)
article_sim <- sample_n(article, size = 10000, 
                        weight = prior, replace = TRUE)
ggplot(article_sim, aes(x = type)) + 
  geom_bar()
```

The data_model variable specifies that there’s a 26.67% chance that any fake
article and a 2.22% chance that any real article uses exclamation points:

```{r}
article_sim <- article_sim %>% 
  mutate(data_model = case_when(type == "fake" ~ 0.2667,
                                type == "real" ~ 0.0222))

glimpse(article_sim)
```

From this data_model, we can simulate whether each article includes an 
exclamation point, separately for each of the 10,000 articles.

```{r}
# Define whether there are exclamation points
data <- c("no", "yes")

# Simulate exclamation point usage 
set.seed(3)
article_sim <- article_sim %>%
  group_by(1:n()) %>% 
  mutate(usage = sample(data, size = 1, 
                        prob = c(1 - data_model, data_model)))

article_sim %>% 
  tabyl(usage, type) %>% 
  adorn_totals(c("col","row"))
```

The left plot reflects the relative breakdown of exclamation point usage among
real and fake news, the right plot frames this information within the
normalizing context that only roughly 12% (1206 / 10000) of all articles use
exclamation points.

```{r}
ggplot(article_sim, aes(x = type, fill = usage)) + 
  geom_bar(position = "fill") + 
  theme(legend.position = "bottom") +
  ggplot(article_sim, aes(x = usage)) + 
  geom_bar() +
  patchwork::plot_annotation(title = "Exclamation point usage")
```

We can filter out the simulated articles that match our data (i.e., those that
use exclamation points) and examine the percentage of articles that are fake:

```{r}
article_sim %>% 
  filter(usage == "yes") %>% 
  tabyl(type) %>% 
  adorn_totals("row")
```

If an article uses exclamation points, it’s most likely fake. Otherwise, it’s
most likely real:

```{r}
ggplot(article_sim, aes(x = type)) + 
  facet_wrap(~ usage) +
  geom_bar() +
  labs(title = "Does an article use an exclamation mark?")
```

## 2.2 Example: Pop vs soda vs coke

The `pop_vs_soda` dataset in the `bayesrules` package (Dogucu, Johnson, and 
Ott 2021) includes 374250 responses to a volunteer survey conducted at 
popvssoda.com.

```{r}
data("pop_vs_soda")
set.seed(124)
sample_n(pop_vs_soda, 10)
```

```{r}
pop_vs_soda %>% 
  tabyl(pop, region) %>% 
  adorn_percentages("col")
```

## 2.3 Building a Bayesian model for random variables

### 2.3.7 Posterior simulation

```{r}
# Define possible win probabilities
chess <- data.frame(pi = c(0.2, 0.5, 0.8))

# Define the prior model
prior <- c(0.10, 0.25, 0.65)

# Simulate 10000 values of pi from the prior
set.seed(84735)
chess_sim <- sample_n(chess, size = 10000, weight = prior, replace = TRUE)
chess_sim %>% 
  tabyl(pi) %>% 
  adorn_totals("row")
```

From each of the 10,000 prior plausible values pi, we can simulate six games and
record Kasparov’s number of wins, y.

```{r}
chess_sim <- chess_sim %>%
  mutate(y = rbinom(n = 1e4, size = 6, prob = pi))
# Plot y by pi
ggplot(chess_sim, aes(x = y)) + 
  stat_count(aes(y = after_stat(prop))) + 
  facet_wrap(~ pi)
```

Let’s focus on the simulated outcomes that match the observed data that Kasparov
won one game.

```{r}
# Focus on simulations with y = 1
win_one <- chess_sim %>% 
  filter(y == 1)

# Summarize the posterior approximation
win_one %>% 
  tabyl(pi) %>% 
  adorn_totals("row")

# Plot the posterior approximation
ggplot(win_one, aes(x = pi)) + 
  geom_bar() +
  labs(title = "A bar plot of 10,000 simulated π values")
```

## Reproducibility

<details>
<summary>
Session information
</summary>

```{r}
sessionInfo()
```

</details>